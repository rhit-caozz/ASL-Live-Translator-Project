load("train.mat");
load("val.mat");
load("test.mat");
load("images.mat");

% number of classes
classNames = categories(images.Labels);
numClasses = numel(classNames);

% Load and set learning rate factor for last FC layer
net = imagePretrainedNetwork("vgg16", NumClasses=numClasses);
net = setLearnRateFactor(net,"fc8/Weights",20);
net = setLearnRateFactor(net,"fc8/Bias",20);

% Update images for specified network size and augment to stop memorization
inputSize = net.Layers(1).InputSize;
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),train, ...
    'DataAugmentation',imageAugmenter);

% change size of validation images to network size
augimdsValidation = augmentedImageDatastore(inputSize(1:2),val);

options = trainingOptions("sgdm", ...
    MiniBatchSize=1024, ...
    MaxEpochs=6, ...
    Metrics="accuracy", ...
    InitialLearnRate=1e-4, ...
    Shuffle="every-epoch", ...
    ValidationData=augimdsValidation, ...
    ValidationFrequency=3, ...
    Verbose=false, ...
    Plots="training-progress", ...
    ExecutionEnvironment='auto-parallel');

% Train net with given images
net = trainnet(augimdsTrain,net,"crossentropy",options);

% Save generated network
save("vgg16_net.mat", "net");

